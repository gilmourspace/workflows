name: GOATS test-run

on:
    workflow_call:
        inputs:
            test-case-id:
                description: The ID of the test case to run.
                required: true
                type: string
            client-id:
                description: The ID of the client to run the test run on.
                required: true
                type: string
            server-host:
                description: The hostname of the server to communicate with.
                type: string
                default: "http://10.1.2.13:8081"

jobs:

    run-goats-test:
        runs-on:
            group: gspace
        steps:
            - name: Fetch GOATS CLI
              uses: dsaltares/fetch-gh-release-asset@master
              with:
                repo: 'gilmourspace/goats-cli'
                version: 'tags/v0.2.0'
                file: 'goats-cli.deb'
                token: ${{ secrets.WORKFLOW_PAT }}

            - name: Install GOATS CLI
              run: |
                ar vx goats-cli.deb
                tar xvf data.tar.zst
                mv ./usr/local/bin/goats .

            - name: Run Test
              env:
                auth: ${{ secrets.GOATS_USER_AUTH }}
                id: ${{ secrets.GOATS_USER_ID }}
              run: |
                echo "::group::Start Test"
                BEARER=$(./goats user token --host=${{ inputs.server-host }} --auth-basic ${{ env.auth }} --extract=value ${{ env.id }})
                RUN_ID=$(./goats test-run create \
                  --host=${{ inputs.server-host }} --bearer "$BEARER" --extract=id \
                  --name="GITHUB" \
                  --info="This run has been generated by a github workflow." \
                  --client-id=${{ inputs.client-id }} \
                  --test-case-id=${{ inputs.test-case-id }} \
                  --tester-id ${{ env.id }}) && echo "$RUN_ID"
                RUN_STATUS=$(./goats test-run start --host=${{ inputs.server-host }} --bearer "$BEARER" --extract=status "$RUN_ID") && echo "$RUN_STATUS"
                echo "BEARER=$BEARER" >> "$GITHUB_ENV"
                echo "RUN_ID=$RUN_ID" >> "$GITHUB_ENV"
                echo "RUN_STATUS=$RUN_STATUS" >> "$GITHUB_ENV"
                echo "::endgroup::"

            - name: Monitor Test
              run: |
                echo "::group::Monitor Test"
                i=0
                while [[ "$RUN_STATUS" == 'runningNonInteractive' ]] || [[ "$RUN_STATUS" == 'running' ]] || [[ "$RUN_STATUS" == 'paused' ]]
                do
                    sleep 10
                    i=$((i+10))
                    RUN_STATUS=$(./goats test-run --host=${{ inputs.server-host }} --bearer "$BEARER" --extract=status "$RUN_ID") && echo "$RUN_STATUS"
                    if (( $i > 3600 ))
                    then
                        echo "Test run timed out after 1 hour, Aborting."
                        RUN_STATUS=$(./goats test-run abort --host=${{ inputs.server-host }} --bearer "$BEARER" "$RUN_ID") && echo "$RUN_STATUS"
                        break
                    fi
                done
                echo "::endgroup::"
                OUTPUT=$(./goats test-run --host=${{ inputs.server-host }} --bearer "$BEARER" "$RUN_ID")
                echo "# Test Run Results" >> $GITHUB_STEP_SUMMARY
                echo "**Run ID:** $RUN_ID" >> $GITHUB_STEP_SUMMARY
                echo "**Status:** $RUN_STATUS" >> $GITHUB_STEP_SUMMARY
                echo "## Output" >> $GITHUB_STEP_SUMMARY
                echo "$OUTPUT" >> $GITHUB_STEP_SUMMARY
                if [[ "$RUN_STATUS" != 'completedSuccessfully' ]]
                then
                    echo "::error::Test run failed. Status: $RUN_STATUS"
                    exit 1
                fi
                    exit 0
